/*
ecpg prog1.pgc
cc -I/usr/include/pgsql -c ex.c
cc -o ex ex.o -L/usr/lib64 -lecpg,,
где -L/usr/local/pgsql/lib путь где лежит libecpg.so
-I/usr/local/pgsql/include путь где лежит ecpgtype.h, ecpglib.h, ecpgerrno.h, sqlca.h.
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
EXEC SQL include sqlca;
//#pragma comment(lib, "libecpg.lib")
         /*
                EXEC SQL BEGIN DECLARE SECTION;
                EXEC SQL END DECLARE SECTION; - пара инструкций для обьявления переменных,
                которые будут взаимодействовать с данными на сервере.
                Внутри этих инструкций используется обычный С-синтаксис обьявления и
                инициализации переменных.
         */

        // для соединения с БД
        EXEC SQL BEGIN DECLARE SECTION; 
        char ConnectionString [] = "testDB@localhost:5433";
        char Login [] = "postgres";
        char Password [] = "1";
        EXEC SQL END DECLARE SECTION;

        // для взаимодействия с БД
        EXEC SQL BEGIN DECLARE SECTION;
                int my_id;
                char my_data[256];
                int my_count;
                char date1[10];
                char date2[10];
              EXEC SQL END DECLARE SECTION;	

        /*
                Инструкция, позволяющая обрабатывать ошибки.
        */
        //void f_error(void);
        //EXEC SQL WHENEVER SQLERROR CALL f_error;	
        EXEC SQL WHENEVER SQLERROR SQLPRINT;			
        /*
            Общий синтаксис: 
            EXEC SQL WHENEVER condition action;
                condition - тип ошибок, который будет отлавливаться.
                action - действие, которое будет инициироваться при возникновении ошибки.
                Возможные значения condition:
                                 SQLERROR - ошибки при выполении инструкции
                                 SQLWARNING - предупреждения при выполении инструкции
                                 NOT FOUND - попытка извлечь пустую строку
              Возможные значения action:   
                                 CONTINUE - продолжение работы приложения	
                                 GOTO label - переход на метку
                                 SQLPRINT - печать ошибок в стандартный поток ошибок
                                 STOP - эквивалент exit(1) в С
                                 DO BREAK - эквивалент break в С. Используется только в switch
                                            или в цикле.
                                 CALL name (args) - вызов функции name с аргументами args 
                                 DO name (args)   - вызов функции name с аргументами args 

        */
int menu();
int Dynamic_sql_insert();
int Dynamic_sql_select_1();
int Dynamic_sql_select_2();
int InsertValues();
int ReadAllRecord();
int SelectValues();
int UpdateValues();
int DeleteValues();

int main() {

        EXEC SQL CONNECT TO :ConnectionString  USER :Login using :Password;

                /*
                   Переменная sqlca - структура. Поле sqlcode - можно использовать для 
                   индикации ошибок. 
                   sqlstate - переменная из 5 символов. Если первые два 00, то всё нормально.
                */

        if( sqlca.sqlcode != 0 || strncmp(sqlca.sqlstate,"00",2))
        {
                printf("connect -- NoOK\n");
                exit(-1);
        }
        else
        {
                printf("connect --OK\n");	
                menu();
        }	
        exec sql disconnect;
        printf("disconnect --OK\n");
}

int menu()
{
        char sitem[512];
        while(1)
        {
            printf("1. show\n");
            printf("2. select values\n");
            printf("3. update values\n");
            printf("4. insert values\n");
            printf("5. delete values\n");
            printf("6. Dynamic sql insert\n");
            printf("7. Dynamic sql select one\n");
            printf("8. Dynamic sql select more than one\n");
            printf("9. quit\n");
            printf("choose menu item > ");
            if(scanf("%s", &sitem)!=1) break;
         
if (strlen(sitem)>1) continue;   
           
                switch(sitem[0])
                {
                        case '1':
                        {
                                printf("_____________________\n");
                                printf("1. show\n");
                                ReadAllRecord();
                                printf("_____________________\n");
                                break;
                        }
                        case '2':
                        {
                                printf("_____________________\n");
                                printf("2. select values\n");
                                SelectValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '3':
                        {
                                printf("_____________________\n");
                                printf("3. update values\n");
                                UpdateValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '4':
                        {
                                printf("_____________________\n");
                                printf("4. insert values\n");	
                                InsertValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '5':
                        {
                                printf("_____________________\n");
                                printf("5. delete values\n");
                                DeleteValues();
                                printf("_____________________\n");
                                break;
                        }
                        case '6':
                        {
                               Dynamic_sql_insert();
                               break;
                        }
                        case '7':
                        {
                               Dynamic_sql_select_1();
                               break;
                        }
                         case '8':
                        {
                               Dynamic_sql_select_2();
                               break;
                        }
                        case '9':
                        {
                                return 0;
                        }
                        default: break;
                }
        }
        return 0;
}

int Dynamic_sql_insert()
{
EXEC SQL BEGIN DECLARE SECTION; 
       
char stmt[]="INSERT INTO exTab(id,name) VALUES(?, ?);"; 
        EXEC SQL END DECLARE SECTION;

       EXEC SQL SELECT count(*) INTO :my_count FROM exTab;
        if(my_count==0)
        {	
                my_id=1;
        }
        else
        {
                EXEC SQL SELECT max(id) INTO :my_id FROM exTab;
                my_id=my_id+1;
        }

     

       EXEC SQL PREPARE mystmt FROM :stmt;
 
       EXEC SQL EXECUTE mystmt USING :my_id, 123;
       EXEC SQL COMMIT;
        return 0;
}

int Dynamic_sql_select_1()
{
     EXEC SQL BEGIN DECLARE SECTION;           
          char *stmt = "SELECT name "
             "  FROM exTab "
             "  WHERE id=?";     
     EXEC SQL END DECLARE SECTION;



     EXEC SQL PREPARE sqlstmt FROM :stmt;
     

    printf("select 'id' >");
        scanf("%d", &my_id);

    EXEC SQL EXECUTE sqlstmt INTO :my_data USING :my_id;
    printf("name=%s\n", my_data);	



    EXEC SQL COMMIT;
    return 0;
}


int Dynamic_sql_select_2()
{
     EXEC SQL BEGIN DECLARE SECTION;           
          char *stmt = "SELECT name "
             "  FROM exTab "
             "  WHERE id>=? and id<=?";
     int id_min;
     int id_max;
     EXEC SQL END DECLARE SECTION;



     EXEC SQL PREPARE sqlstmt FROM :stmt;

     EXEC SQL DECLARE my_cursor CURSOR FOR sqlstmt ;

printf("select 'id_min' >");
        scanf("%d", &id_min);

printf("select 'id_max' >");
        scanf("%d", &id_max);

     EXEC SQL OPEN my_cursor USING :id_min,:id_max;



     while (1)
     {
        EXEC SQL FETCH my_cursor INTO :my_data;    
        if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
        printf("name=%s\n", my_data);	
     }

    EXEC SQL CLOSE my_cursor;

    EXEC SQL COMMIT;
    return 0;
}

int InsertValues()
{		
        /*
                Получения id
        */
        EXEC SQL SELECT count(*) INTO :my_count FROM exTab;
        if(my_count==0)
        {	
                my_id=1;
        }
        else
        {
                EXEC SQL SELECT max(id) INTO :my_id FROM exTab;
                my_id=my_id+1;
        }

       printf("enter new 'data' >");

        scanf("%c", my_data);
         
         my_data[0]='\0';
        scanf("%[ a-zA-Z0-9+,а-яА-Я/-.]",my_data);
        

       printf("enter new 'date1' >");
       
       scanf("%c", date1);
      
            date1[0]='\0';
        scanf("%[ a-zA-Z0-9+,а-яА-Я/-.]",date1);

 printf("enter new 'date2' >");
        scanf("%c", date2);
        
            date2[0]='\0';
        scanf("%[ a-zA-Z0-9+,а-яА-Я/-.]",date2);
        /*
                Вставка данных в таблицу из переменных my_id, my_data
        */
        
        
        
        EXEC SQL INSERT INTO exTab(id, name,date1,date2) VALUES(:my_id, :my_data, :date1, :date2);

        /*
                Инструкция применения транзакции.
                Если ошибок нет при выполении, то данные сохраняются в базе.
                Если произошла ошибка, то данные не сохраняются.
                !Так как по-умолчанию данные не сохраняются, то здесь
                нет необходимости явно писать инструкцию - EXEC SQL ROLLBACK,
                означающую откат транзакции.
        */
        /*
                Применить транзакцию, т.е сохранить данные в базе.
        */
        EXEC SQL COMMIT;
        return 0;
}


int ReadAllRecord()
{
        /*
                Обьявление курсора.
                Общий синтаксис: EXEC SQL DECLARE <cursor_name> CURSOR FOR <sql_statement>;
        */
        EXEC SQL DECLARE MyCursor CURSOR FOR
                SELECT id,COALESCE(name,''),COALESCE(CAST(date1 as varchar),''),COALESCE(CAST(date2 as varchar),'') FROM exTab ORDER BY id;
        /*
            Открытие курсора.
            Общий синтаксис: EXEC SQL OPEN <cursor_name>;
        */
        EXEC SQL OPEN MyCursor;
        while(1)
        {
            /*
                        Чтение из курсора.
                        Общий синтаксис: EXEC SQL FETCH <cursor_name> INTO <var_list>;,
                                   где <var_list> - список переменных.	
            */
                EXEC SQL FETCH MyCursor INTO :my_id, :my_data, :date1, :date2;

                /*'ECPG_NOT_FOUND' - попытка прочитать пустую
                строку. */
                if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;		
                printf("\t %d \t %s \t %s \t %s\n", my_id, my_data, date1, date2);
        }
        /*
                Закрытие курсора.
                Общий синтаксис: EXEC SQL CLOSE <cursor_name>;
        */
        EXEC SQL CLOSE MyCursor;
        EXEC SQL COMMIT;
        return 0;
}

int SelectValues()
{		
        printf("select 'id' >");
        scanf("%d", &my_id);
        /*
                Извленеие данных из таблицы в переменные my_id, my_data
        */
        EXEC SQL SELECT id, name INTO :my_id, :my_data FROM exTab WHERE id = :my_id;
        printf("id: %d, data: %s \n", my_id, my_data);
        return 0;
}
int UpdateValues()
{	
        printf("select updatable 'id' >");
        scanf("%d", &my_id);
        printf("enter new  'data' >");
        scanf("%s", my_data);

        /*
                Обновление данных data в таблице 
        */
        EXEC SQL UPDATE exTab SET name = :my_data WHERE id = :my_id;	

        EXEC SQL COMMIT;
        return 0;
}
int DeleteValues()
{
        printf("select deleted 'id' >");
        scanf("%d", &my_id);

        /*
                Удаление данных из таблицы
        */
        EXEC SQL DELETE FROM exTab WHERE id = :my_id;
        /*
                Применить транзакцию, т.е удалить данные из базы
        */
        EXEC SQL COMMIT;
}
/*void f_error(void)
{
   printf("\n% .70s \n", sqlca.sqlerrm.sqlerrmc);
}*/
